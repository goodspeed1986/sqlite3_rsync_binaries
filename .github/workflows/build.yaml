name: Build sqlite3_rsync

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [x64]
        include:
          - os: ubuntu-latest
            arch: arm
            build-platform: linux-arm
          - os: ubuntu-latest
            arch: arm64
            build-platform: linux-arm64
          - os: macos-latest
            arch: arm64
            build-platform: macos-arm64
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache SQLite repository
      uses: actions/cache@v4
      with:
        path: ./sqlite
        key: sqlite-repo-${{ runner.os }}-${{ matrix.arch }}-${{ hashFiles('**/sqlite/.git/HEAD') }}
        restore-keys: |
          sqlite-repo-${{ runner.os }}-${{ matrix.arch }}-

    - name: Set up environment (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ make git zip
        if [ "${{ matrix.arch }}" = "arm" ] || [ "${{ matrix.arch }}" = "arm64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        fi

    - name: Set up environment (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install git zip
        xcode-select --install || true

    - name: Clone or update SQLite repository
      shell: bash
      run: |
        if [ -d "sqlite" ]; then
          cd sqlite
          git fetch origin
          git checkout sqlite3-rsync
        else
          git clone https://github.com/sqlite/sqlite.git
          cd sqlite
          git checkout sqlite3-rsync
        fi

    - name: Generate sqlite3.c
      working-directory: ./sqlite
      run: |
        ./configure
        make sqlite3.c
        ls -l sqlite3.c

    - name: Compile sqlite3-rsync (Linux x64)
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'
      working-directory: ./sqlite/tool
      run: |
        gcc -o sqlite3-rsync sqlite3-rsync.c ../sqlite3.c -DSQLITE_ENABLE_DBPAGE_VTAB
        ./sqlite3-rsync --help

    - name: Compile sqlite3-rsync (Linux ARM)
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm'
      working-directory: ./sqlite/tool
      run: |
        aarch64-linux-gnu-gcc -o sqlite3-rsync sqlite3-rsync.c ../sqlite3.c -DSQLITE_ENABLE_DBPAGE_VTAB
        file sqlite3-rsync

    - name: Compile sqlite3-rsync (Linux ARM64)
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
      working-directory: ./sqlite/tool
      run: |
        aarch64-linux-gnu-gcc -o sqlite3-rsync sqlite3-rsync.c ../sqlite3.c -DSQLITE_ENABLE_DBPAGE_VTAB
        file sqlite3-rsync

    - name: Compile sqlite3-rsync (macOS x64)
      if: matrix.os == 'macos-latest' && matrix.arch == 'x64'
      working-directory: ./sqlite/tool
      run: |
        arch -x86_64 gcc -o sqlite3-rsync sqlite3-rsync.c ../sqlite3.c -DSQLITE_ENABLE_DBPAGE_VTAB
        ./sqlite3-rsync --help

    - name: Compile sqlite3-rsync (macOS ARM64)
      if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
      working-directory: ./sqlite/tool
      run: |
        arch -arm64 gcc -o sqlite3-rsync sqlite3-rsync.c ../sqlite3.c -DSQLITE_ENABLE_DBPAGE_VTAB
        ./sqlite3-rsync --help

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: sqlite3-rsync-${{ matrix.os }}-${{ matrix.arch }}
        path: ./sqlite/tool/sqlite3-rsync*

  release:
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Debug artifact contents
      run: |
        echo "Listing downloaded artifacts:"
        ls -R artifacts
      shell: bash

    - name: Create archive
      run: |
        mkdir -p release
        find artifacts -type f -name 'sqlite3-rsync*' -exec cp {} release/ \;
        ls -l release
        cd release
        zip -r ../sqlite3-rsync-binaries-${{ github.ref_name }}.zip .
        ls -l ..
      shell: bash

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: sqlite3-rsync ${{ github.ref_name }}
        body: |
          Automated release of sqlite3-rsync for Linux and macOS.
          Includes binaries for:
          - Ubuntu (x64, arm, arm64)
          - macOS (x64, arm64)
        draft: false
        prerelease: false

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: sqlite3-rsync-binaries-${{ github.ref_name }}.zip
        asset_name: sqlite3-rsync-binaries-${{ github.ref_name }}.zip
        asset_content_type: application/zip