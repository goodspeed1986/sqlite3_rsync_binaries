name: Build sqlite3_rsync

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        arch: [x64]
        include:
          - os: ubuntu-latest
            arch: arm
            build-platform: linux-arm
          - os: ubuntu-latest
            arch: arm64
            build-platform: linux-arm64
          - os: macos-latest
            arch: arm64
            build-platform: macos-arm64
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Полный клон для доступа к тегам

    - name: Cache SQLite repository
      uses: actions/cache@v4
      with:
        path: ./sqlite
        key: sqlite-repo-${{ runner.os }}-${{ matrix.arch }}-${{ hashFiles('**/sqlite/.git/HEAD') }}
        restore-keys: |
          sqlite-repo-${{ runner.os }}-${{ matrix.arch }}-

    - name: Set up environment (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ make git zip
        if [ "${{ matrix.arch }}" = "arm" ] || [ "${{ matrix.arch }}" = "arm64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        fi
        # Проверка установки компилятора для ARM
        if [ "${{ matrix.arch }}" = "arm" ] || [ "${{ matrix.arch }}" = "arm64" ]; then
          aarch64-linux-gnu-gcc --version || { echo "aarch64-linux-gnu-gcc not found"; exit 1; }
        fi

    - name: Set up environment (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install git zip
        xcode-select --install || true
        # Проверка доступности gcc
        gcc --version || { echo "gcc not found"; exit 1; }

    - name: Clone or update SQLite repository
      shell: bash
      run: |
        if test -d "sqlite"; then
          cd sqlite
          git fetch origin
          git checkout version-3.50.0
        else
          git clone --branch version-3.50.0 https://github.com/sqlite/sqlite.git
          cd sqlite
        fi

    - name: Generate sqlite3.c
      working-directory: ./sqlite
      shell: bash
      run: |
        ./configure
        make sqlite3.c
        ls -l sqlite3.c

    - name: Compile sqlite3-rsync (Linux x64)
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'
      working-directory: ./sqlite/tool
      shell: bash
      run: |
        gcc -o sqlite3-rsync-${{ matrix.os }}-${{ matrix.arch }} sqlite3-rsync.c ../sqlite3.c -DSQLITE_ENABLE_DBPAGE_VTAB
        ./sqlite3-rsync-${{ matrix.os }}-${{ matrix.arch }} --help
        ls -l sqlite3-rsync-${{ matrix.os }}-${{ matrix.arch }}

    - name: Compile sqlite3-rsync (Linux ARM)
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm'
      working-directory: ./sqlite/tool
      shell: bash
      run: |
        aarch64-linux-gnu-gcc -o sqlite3-rsync-${{ matrix.os }}-${{ matrix.arch }} sqlite3-rsync.c ../sqlite3.c -DSQLITE_ENABLE_DBPAGE_VTAB
        file ./sqlite3-rsync-${{ matrix.os }}-arm
        ls -l sqlite3-rsync-${{ matrix.os }}-arm

    - name: Compile sqlite3-rsync (Linux ARM64)
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
      working-directory: ./sqlite/tool
      shell: bash
      run: |
        aarch64-linux-gnu-gcc -o sqlite3-rsync-${{ matrix.os }}-${{ matrix.arch }} sqlite3-rsync.c ../sqlite3.c -DSQLITE_ENABLE_DBPAGE_VTAB
        file ./sqlite3-rsync-${{ matrix.os }}-arm64
        ls -l sqlite3-rsync-${{ matrix.os }}-arm64

    - name: Compile sqlite3-rsync (macOS x64)
      if: matrix.os == 'macos-latest' && matrix.arch == 'x64'
      working-directory: ./sqlite/tool
      shell: bash
      run: |
        arch -x86_64 gcc -o sqlite3-rsync-${{ matrix.os }}-${{ matrix.arch }} sqlite3-rsync.c ../sqlite3.c -DSQLITE_ENABLE_DBPAGE_VTAB
        ./sqlite3-rsync-${{ matrix.os }}-${{ matrix.arch }} --help
        ls -l sqlite3-rsync-${{ matrix.os }}-${{ matrix.arch }}

    - name: Compile sqlite3-rsync (macOS ARM64)
      if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
      working-directory: ./sqlite/tool
      shell: bash
      run: |
        arch -arm64 gcc -o sqlite3-rsync-${{ matrix.os }}-${{ matrix.arch }} sqlite3-rsync.c ../sqlite3.c -DSQLITE_ENABLE_DBPAGE_VTAB
        ./sqlite3-rsync-${{ matrix.os }}-arm64 --help
        ls -l sqlite3-rsync-${{ matrix.os }}-arm64

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: sqlite3-rsync-${{ matrix.os }}-${{ matrix.arch }}
        path: ./sqlite/tool/sqlite3-rsync-${{ matrix.os }}-${{ matrix.arch }}

  tag-and-release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.create_tag.outputs.new_tag }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Полный клон для доступа к тегам
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create and push tag
      id: create_tag
      run: |
        # Получить последний тег, начинающийся с v
        latest_tag=$(git tag --sort=-v:refname | grep '^v[0-9]\+\.[0-9]\+\.[0-9]\+$' | head -n 1)
        if [ -z "$latest_tag" ]; then
          new_tag="v1.0.0"
        else
          # Извлечь мажор, минор и патч
          version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version"
          # Увеличить патч
          new_patch=$((patch + 1))
          new_tag="v$major.$minor.$new_patch"
        fi
        echo "Creating tag $new_tag"
        git tag $new_tag
        git push origin $new_tag
        echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
      shell: bash

  release:
    needs: [build, tag-and-release]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Debug artifact contents
      run: |
        echo "Listing artifacts:"
        ls -R artifacts
      shell: bash

    - name: Create archive
      run: |
        mkdir -p release
        # Явно перебрать все директории артефактов
        for dir in artifacts/*; do
          if [ -d "$dir" ]; then
            binary=$(find "$dir" -type f -name "sqlite3-rsync-*")
            if [ -n "$binary" ]; then
              cp "$binary" release/
            fi
          fi
        done
        ls -l release
        # Проверка количества файлов
        file_count=$(ls -1 release | wc -l)
        if [ "$file_count" -ne 5 ]; then
          echo "Error: Expected 5 binaries, but found $file_count"
          exit 1
        fi
        cd release
        zip -r ../sqlite3-rsync-binaries-${{ needs.tag-and-release.outputs.new_tag || github.ref_name }}.zip .
        ls -l ..
      shell: bash

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.tag-and-release.outputs.new_tag || github.ref_name }}
        release_name: sqlite3-rsync ${{ needs.tag-and-release.outputs.new_tag || github.ref_name }}
        body: |
          Automated release of sqlite3-rsync for Linux and macOS.
          Includes binaries for:
          - Ubuntu (x64, arm, arm64)
          - macOS (x64, arm64)
        draft: false
        prerelease: false

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: sqlite3-rsync-binaries-${{ needs.tag-and-release.outputs.new_tag || github.ref_name }}.zip
        asset_name: sqlite3-rsync-binaries-${{ needs.tag-and-release.outputs.new_tag || github.ref_name }}.zip
        asset_content_type: application/zip